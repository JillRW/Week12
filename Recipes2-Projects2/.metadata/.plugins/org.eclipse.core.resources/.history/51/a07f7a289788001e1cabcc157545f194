package com.promineotech;



import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import static org.junit.jupiter.params.provider.Arguments.arguments;

class TestDemoJUnitTest {
	private TestDemo testDemo;

	@BeforeEach
	void setUp() throws Exception {
		testDemo = new TestDemo();
	}

	@ParameterizedTest
	@MethodSource("TestDemoJUnitTest#argumentsForAddPositive")
	void assertThatTwoPositiveNumbersAreAddedCorrectly(int a, int b, int expected, boolean expectException) {
		if(!expectException) {
		      assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
		} else {
			assertThatThrownBy(()-> testDemo.addPositive(a, b)).isInstanceOf(IllegalArgumentException.class);
		}

	}
	static Stream <Arguments> argumentsForAddPositive() {
		return Stream.of(
				// do the first 2 parameters add up to the 3rd parameter? Or does it not matter?
				arguments(1, 3, 4, false),
				arguments(-1, 0, 5, true),
				arguments(5, 1, 6, false),
				arguments(2, -5, -4, true),
				arguments(0, 1, 3, true),
				arguments(8, -3, 10, true)
				);
	}
	
	@Test 
	void assertThatPairsOfPositiveNumbersAreAddedCorrectly() {
		assertThat(testDemo.addPositive(4,5)).isEqualTo(9);
		assertThat(testDemo.addPositive(40,50)).isEqualTo(90);
		assertThat(testDemo.addPositive(2,4)).isEqualTo(6);
		assertThat(testDemo.addPositive(10, 11)).isEqualTo(21);
		assertThat(testDemo.addPositive(3, 5)).isEqualTo(8);
		assertThat(testDemo.addPositive(24,25)).isEqualTo(49);
		
	}
	
	
	@ParameterizedTest
	@MethodSource("TestDemoJUnitTest#argumentsForMultiplyPositive")
	void assertThatTwoPositiveNumbersAreMultipliedCorrectly(int a, int b, int expected, boolean expectException) {
		if(!expectException) {
		      assertThat(testDemo.multiplyPositive(a, b)).isEqualTo(expected);
		} else {
			assertThatThrownBy(()-> testDemo.multiplyPositive(a, b)).isInstanceOf(IllegalArgumentException.class);
		}

	}
	static Stream <Arguments> argumentsForMultiplyPositive() {
		return Stream.of(
				// should the 1st 2 parameters always have the correct product in the 3rd parameter, weather or not they are 0 or negative?  Or does it not matter?
				arguments(1, 3, 4, false),
				arguments(-1, 0, 5, true),
				arguments(5, 1, 6, false),
				arguments(2, -5, -4, true),
				arguments(0, 1, 3, true),
				arguments(8, -3, 10, true)
				);
	}
	

}
